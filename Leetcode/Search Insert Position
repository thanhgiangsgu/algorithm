Search Insert Position

Problem : https://leetcode.com/problems/search-insert-position/description/

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104


Linear Search 

#include <vector>

class Solution {
public:
    int searchInsert(std::vector<int>& nums, int target) {
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] >= target) {
                return i;  // Trả về vị trí mà target nên được chèn hoặc vị trí của target nếu nó đã tồn tại trong mảng.
            }
        }
        return nums.size();  // Nếu target lớn hơn tất cả các phần tử trong mảng, trả về vị trí cuối cùng để chèn.
    }
};


Binary Search 

#include <iostream>
#include <vector>

int searchInsert(std::vector<int>& nums, int target) {
    int left = 0, right = nums.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return left;  // If the target is not found, return the index where it would be inserted.
}

int main() {
    std::vector<int> nums1 = {1, 3, 5, 6};
    int target1 = 5;
    std::cout << searchInsert(nums1, target1) << std::endl;  // Output: 2

    std::vector<int> nums2 = {1, 3, 5, 6};
    int target2 = 2;
    std::cout << searchInsert(nums2, target2) << std::endl;  // Output: 1

    std::vector<int> nums3 = {1, 3, 5, 6};
    int target3 = 7;
    std::cout << searchInsert(nums3, target3) << std::endl;  // Output: 4

    return 0;
}
