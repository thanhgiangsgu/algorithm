Plus One

Problem : https://leetcode.com/problems/plus-one/description/

Thuật toán : https://yarndev.wordpress.com/2024/01/30/plus-one/

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 

Constraints:

1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.

Code 

#include <iostream>
#include <vector>
 
std::vector<int> plusOne(std::vector<int>& digits) {
    int n = digits.size();
    int carry = 1; // Start with a carry of 1 since we want to increment by one.
 
    for (int i = n - 1; i >= 0; --i) {
        int sum = digits[i] + carry;
        digits[i] = sum % 10; // Update the current digit.
        carry = sum / 10; // Calculate the carry for the next iteration.
 
        // If there is no carry, stop the loop since further digits won't be affected.
        if (carry == 0) {
            break;
        }
    }
 
    // If there is still a carry, insert a new digit at the beginning.
    if (carry > 0) {
        digits.insert(digits.begin(), carry);
    }
 
    return digits;
}
 
int main() {
    // Example usage
    std::vector<int> digits = {1, 2, 3};
    std::vector<int> result = plusOne(digits);
 
    // Print the result
    for (int digit : result) {
        std::cout << digit << " ";
    }
    std::cout << std::endl;
 
    return 0;
}
