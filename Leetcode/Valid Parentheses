Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

Code

class Solution {
public:
    bool isValid(string s) {
        std::stack<char> stack;
        std::unordered_map<char, char> mapping = {{')', '('}, {']', '['}, {'}', '{'}};

        for (char c : s) {
            if (mapping.find(c) == mapping.end()) {
                // If it's an opening bracket, push onto the stack
                stack.push(c);
            } else {
                // If it's a closing bracket
                if (stack.empty() || stack.top() != mapping[c]) {
                    return false;
                }
                stack.pop();  // Matching pair found, pop from the stack
            }
        }

        // The string is valid if the stack is empty at the end
        return stack.empty();
    }
};
